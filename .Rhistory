a <- 30
a
print.Date(10)
print(10)
print(10)
clear
clearPushBack()
print(10)
a <- 30
a
b = 20
# R의 할당 연산자 : <-, =
print(10)
a <- 30
a
b = 20
b
print(10)
age = 20
class(age)
class(name)
name = "Kim"
class(name)
is_TRUE1 = T
is_TRUE2 = TRUE
is_FALSE1 = F
is_FALSE2 = FALSE
class(is_TRUE1)
class(is_TRUE2)
class(is_FALSE1)
class(is_FALSE2)
sido = factor("서울", c("서울", "부산", "제주"))
sido
sido = factor("서울", c("서울", "부산", "제주"))
sido
class(sido)
levels(sido)
A_salary <- c(25, 28, 50, 60, 30, 35, 40, 70, 40, 70, 40, 100, 30, 30)
B_salary <- c(20, 40, 25, 25, 35, 25, 20, 10, 55, 65, 100, 100, 150, 300)
mean(A_salary)
A_salary <- c(25, 28, 50, 60, 30, 35, 40, 70, 40, 70, 40, 100, 30, 30)
B_salary <- c(20, 40, 25, 25, 35, 25, 20, 10, 55, 65, 100, 100, 150, 300)
mean(A_salary)
mean(B_salary)
# 결측값(NA)가 있는 경우 결측값을 제거하고 평균을 구할 때는 na.rm = T 인자를 사용
mean(A_salary, na.rm = T)
print("-"*20)
A_salary <- c(25, 28, 50, 60, 30, 35, 40, 70, 40, 70, 40, 100, 30, 30)
B_salary <- c(20, 40, 25, 25, 35, 25, 20, 10, 55, 65, 100, 100, 150, 300)
mean(A_salary)
mean(B_salary)
# 결측값(NA)가 있는 경우 결측값을 제거하고 평균을 구할 때는 na.rm = T 인자를 사용
mean(A_salary, na.rm = T)
print("-"*20)
A_salary <- c(25, 28, 50, 60, 30, 35, 40, 70, 40, 70, 40, 100, 30, 30)
B_salary <- c(20, 40, 25, 25, 35, 25, 20, 10, 55, 65, 100, 100, 150, 300)
mean(A_salary)
mean(B_salary)
# 결측값(NA)가 있는 경우 결측값을 제거하고 평균을 구할 때는 na.rm = T 인자를 사용
mean(A_salary, na.rm = T)
print("====================================================")
A_salary <- c(25, 28, 50, 60, 30, 35, 40, 70, 40, 70, 40, 100, 30, 30)
B_salary <- c(20, 40, 25, 25, 35, 25, 20, 10, 55, 65, 100, 100, 150, 300)
mean(A_salary)
mean(B_salary)
# 결측값(NA)가 있는 경우 결측값을 제거하고 평균을 구할 때는 na.rm = T 인자를 사용
mean(A_salary, na.rm = T)
A_salary <- c(25, 28, 50, 60, 30, 35, 40, 70, 40, 70, 40, 100, 30, 30)
B_salary <- c(20, 40, 25, 25, 35, 25, 20, 10, 55, 65, 100, 100, 150, 300)
median(A_salary)
median(B_salary)
mean(A_salary)
mean(B_salary)
mean(A_salary, trim = 0.1)
mean(B_salary, trim = 0.1)
A_salary <- c(25, 28, 50, 60, 30, 35, 40, 70, 40, 70, 40, 100, 30, 30)
B_salary <- c(20, 40, 25, 25, 35, 25, 20, 10, 55, 65, 100, 100, 150, 300)
# 범위 탐색
range(A_salary)
range(B_salary)
# 최소값, 최대값 탐색
min(A_salary)
max(A_salary)
min(B_salary)
max(B_salary)
A_salary <- c(25, 28, 50, 60, 30, 35, 40, 70, 40, 70, 40, 100, 30, 30)
B_salary <- c(20, 40, 25, 25, 35, 25, 20, 10, 55, 65, 100, 100, 150, 300)
quantile(A_salary, 0.9)
quantile(B_salary, 0.9)
quantile(A_salary)
quantile(B_salary)
boxplot(A_salary, B_salary, names = c("A회사 salary", "B회사 salary"))
hist(A_salary, xlab = "A사 salary", ylab = "인원수", breaks = 5)
cut_value <- cut(A_salary, breaks = 5)
freq <- table(cut_value)
freq
A_gender <- as.factor(c('남', '남', '남' ,'남', '남', '남', '남', '남' ,'남', '여', '여', '여', '여'))
B_gender <- as.factor(c('남', '남', '남', '남', '여', '여', '여', '여', '여', '여', '남', '여', '여'))
A <- data.frame(gender <- A_gender,
salary <- A_salary)
B <- data.frame(gender <- B_gender,
salary <- B_salary)
freqA <- table(A$gender)
freqA
A_salary <- c(25, 28, 50, 60, 30, 35, 40, 70, 40, 70, 40, 100, 30, 30)
B_salary <- c(20, 40, 25, 25, 35, 25, 20, 10, 55, 65, 100, 100, 150, 300)
A_gender <- as.factor(c('남', '남', '남' ,'남', '남', '남', '남', '남' ,'남', '여', '여', '여', '여'))
B_gender <- as.factor(c('남', '남', '남', '남', '여', '여', '여', '여', '여', '여', '남', '여', '여'))
A <- data.frame(gender <- A_gender,
salary <- A_salary)
B <- data.frame(gender <- B_gender,
salary <- B_salary)
freqA <- table(A$gender)
freqA
A_salary <- c(25, 28, 50, 60, 30, 35, 40, 70, 40, 70, 40, 100, 30, 30)
B_salary <- c(20, 40, 25, 25, 35, 25, 20, 10, 55, 65, 100, 100, 150, 300)
A_gender <- as.factor(c('남', '남', '남' ,'남', '남', '남', '남', '남' ,'남', '여', '여', '여', '여', '여'))
B_gender <- as.factor(c('남', '남', '남', '남', '여', '여', '여', '여', '여', '여', '여', '남', '여', '여'))
A <- data.frame(gender <- A_gender,
salary <- A_salary)
B <- data.frame(gender <- B_gender,
salary <- B_salary)
freqA <- table(A$gender)
freqA
prop.table(freqA)
prop.table(freqB)
freqB <- table(B$gender)
freqB
freqA
freqB
prop.table(freqA)
prop.table(freqB)
barplot(freqA, names = c("남", "녀"), col = c("skyblue", "pink"), ylim = c(0, 10))
title(main = "A사")
barplot(freqA, names = c("남", "녀"), col = c("skyblue", "pink"), ylim = c(0, 10))
title(main = "A사")
barplot(freqB, names = c("남", "녀"), col = c("skyblue", "pink"), ylim = c(0, 10))
title(main = "A사")
pie(x = freqA, col = C("skyblue", "pink"), main = "A사")
pie(x = freqB, col = C("skyblue", "pink"), main = "B사")
pie(x = freqA, col = c("skyblue", "pink"), main = "A사")
pie(x = freqB, col = c("skyblue", "pink"), main = "B사")
A_salary <- c(25, 28, 50, 60, 30 , 35, 40, 70, 40 ,70, 40, 100, 30, 30)
A_hireyears <- c(1, 1, 5, 6 ,3, 3, 4, 7, 4, 7, 4, 10, 3, 3)
A <- data.frame(salary <- A_salary,
hireyears <- A_hireyears)
plot(A$hireyears, A$salary, xlab = "근무년수", ylab = "연봉(백만원단위)")
pairs(iris[, 1:4], main = "iris data")
cor(A$hireyears, A_salary)
cor(A$hireyears, A$salary)
cor(iris[, 1:4])
heatmap(cor(iris[, 1:4]))
A_salary <- c(25, 28, 50, 60, 30, 35, 40, 70, 40, 70, 40, 100, 30, 30)
B_salary <- c(20, 40, 25, 25, 35, 25, 20, 10, 55, 65, 100, 100, 150, 300)
# 백분위수 탐색
# quantile() 함수에 구하려는 수준의 지점을 백분율 인자값으로 줌
# 상위 10%를 구하고 싶은 경우 = 하위 90% = 0.9
quantile(A_salary, 0.9)
quantile(B_salary, 0.9)
# 사분위수 탐색
# quantile() 함수 사용
quantile(A_salary)
quantile(B_salary)
# 상자그림 ( boxplot )
boxplot(A_salary, B_salary, names = c("A회사 salary", "B회사 salary"))
# 히스토그램
# breaks 는 구간을 몇 번 나누는지에 대한 인자
# 막대그래프는 이산형 수치 데이터나 범주형 데이터에 사용, = 막대 사이가 떨어져 있음
# 히스토그램은 연속형 수치 데이터에 사용 = 막대 사이가 없고 연속되어 있음
hist(A_salary, xlab = "A사 salary", ylab = "인원수", breaks = 5)
# 도수분포표
# 수집된 변수의 데이터를 범주 또는 동일한 크기의 구간으로 분류하고
# 각 구간마다 몇 개의 데이터가 존재하는지를 정리한 표로
# 많은 데이터를 알기 쉽게 정리하는 방법 중 하나
# 범주형 데이터가 아닌 경우 ,cut() 함수로 범주형으로 변환 후
# table() 함수를 사용
# 이미 범주형 데이터인 경우, table() 함수를 바로 사용해도 됨
# 도수분포표로 출력되는 메시지를 보면,
# "(" 는 해당 숫자보다 크다는 뜻이고,
# "]"는 해당 숫자와 같거나 작다는 뜻     ===> (24.9, 40] 은 24.9보다 크고 40과 같거나 작은 수의 범주라는 뜻
cut_value <- cut(A_salary, breaks = 5)
freq <- table(cut_value)
freq
A_salary <- c(25, 28, 50, 60, 30, 35, 40, 70, 40, 70, 40, 100, 30, 30)
B_salary <- c(20, 40, 25, 25, 35, 25, 20, 10, 55, 65, 100, 100, 150, 300)
A_gender <- as.factor(c('남', '남', '남' ,'남', '남', '남', '남', '남' ,'남', '여', '여', '여', '여', '여'))
B_gender <- as.factor(c('남', '남', '남', '남', '여', '여', '여', '여', '여', '여', '여', '남', '여', '여'))
A <- data.frame(gender <- A_gender,
salary <- A_salary)
B <- data.frame(gender <- B_gender,
salary <- B_salary)
freqA <- table(A$gender)
freqA
freqB <- table(B$gender)
freqB
# 상대적 빈도표
# prop.table() 사용
# 한 범주에 속하는 빈도가 전체 관찰수에 비해 어느 정도 비중인지 알아볼 때 사용
prop.table(freqA)
prop.table(freqB)
# 막대 그래프
# barplot()
# 이산형 수치 데이터, 범주형 데이터의 도수분포표를 시각화
barplot(freqA, names = c("남", "녀"), col = c("skyblue", "pink"), ylim = c(0, 10))
title(main = "A사")
barplot(freqB, names = c("남", "녀"), col = c("skyblue", "pink"), ylim = c(0, 10))
title(main = "B사")
# 파이 그래프
# pie()
pie(x = freqA, col = c("skyblue", "pink"), main = "A사")
pie(x = freqB, col = c("skyblue", "pink"), main = "B사")
A_salary <- c(25, 28, 50, 60, 30, 35, 40, 70, 40, 70, 40, 100, 30, 30)
B_salary <- c(20, 40, 25, 25, 35, 25, 20, 10, 55, 65, 100, 100, 150, 300)
range(A_salary)
range(B_salary)
min(A_salary)
max(A_salary)
min(B_salary)
max(B_salary)
var(A_salary)
var(B_salary)
sd(A_salary)
sd(B_salary)
pairs(iris[, 1:4], main = "iris data")
A_salary <- c(25, 28, 50, 60, 30 , 35, 40, 70, 40 ,70, 40, 100, 30, 30)
A_hireyears <- c(1, 1, 5, 6 ,3, 3, 4, 7, 4, 7, 4, 10, 3, 3)
A <- data.frame(salary <- A_salary,
hireyears <- A_hireyears)
plot(A$hireyears, A$salary, xlab = "근무년수", ylab = "연봉(백만원단위)")
cor(A$hireyears, A$salary)
cor(iris[, 1:4])
heatmap(cor(iris[, 1:4]))
# boxplot
boxplot(iris)
# hist
hist(iris)
# plot : x y 좌표상의 점으로 시각화
plot(iris)
# pairs() : 여러 변수의 산점도 그래프를 한 눈에 볼 수 있게 작성
pairs(iris[, 1:4], main = "iris data")
# plot : x y 좌표상의 점으로 시각화
plot(iris)
# head() : 벡터, 매트릭스, 테이블, 데이터프레임을 6라인까지 출력
head(iris)
A_salary <- c(25, 28, 50, 60, 30 , 35, 40, 70, 40 ,70, 40, 100, 30, 30)
A_hireyears <- c(1, 1, 5, 6 ,3, 3, 4, 7, 4, 7, 4, 10, 3, 3)
A <- data.frame(salary <- A_salary,
hireyears <- A_hireyears)
plot(A_salary)
# barplot(빈도값 벡터)
barplot(A_hireyears)
# barplot(빈도값 벡터)
barplot(A_hireyears, xlab = "Value", ylab = "Count")
# mosaicplot(행렬) -> 분할표 그림
mosaicplot(A_salary)
# mosaicplot(행렬) -> 분할표 그림
mosaicplot(A)
# stars(행렬) -> 스타차트
stars(A_hireyears)
# stars(행렬) -> 스타차트
stars(A)
bread <- 1000
if ( bread > 50) {
print('You sold a lot!')
} else {
print('Not enough for today')
}
# read csv
data <- read.csv("naver_webtoon_data.csv", header = T)
data
# indexing
data[1:4, 2]
data[1:4, 2, drop = FALSE]
# NA check
data[1, 2] <- NA
# complete.cases() : 모든 열이 꽉 채워져 있는 완전한 행에 대해서만 TRUE 반환
complete.cases(data)
# Add element
data$total <- data$title + data$author
# Add element
data$total <- cbind(data$title, data$author)
data$total
head(data$total, 5)
# NULL을 이용한 삭제
data$total <- NULL
head(data$total)
# 필터링
data[data$id > 100]
# 필터링
data[data$id > 100,]
## subset() 으로 필터링
subset(data, id > 100)
